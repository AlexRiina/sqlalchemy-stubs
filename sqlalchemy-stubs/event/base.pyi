from typing import Any, Optional
from .attr import _JoinedListener

class _UnpickleDispatch(object):
    def __call__(self, _instance_cls): ...

class _Dispatch(object):
    def __init__(self, parent, instance_cls: Optional[Any] = ...) -> None: ...
    def __getattr__(self, name): ...
    def __reduce__(self): ...

class _EventMeta(type):
    def __init__(cls, classname, bases, dict_) -> None: ...

class Events(metaclass=_EventMeta): ...

class _JoinedDispatcher(object):
    local: Any = ...
    parent: Any = ...
    def __init__(self, local, parent) -> None: ...
    def __getattr__(self, name) -> _JoinedListener: ...

class dispatcher(object):
    dispatch_cls: Any = ...
    events: Any = ...
    def __init__(self, events) -> None: ...
    def __get__(self, obj, cls): ...
