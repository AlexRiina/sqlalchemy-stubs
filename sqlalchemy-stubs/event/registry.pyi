from typing import Any, Optional

class _EventKey(object):
    target: Any = ...
    identifier: Any = ...
    fn: Any = ...
    fn_key: Any = ...
    fn_wrap: Any = ...
    dispatch_target: Any = ...
    def __init__(self, target, identifier, fn, dispatch_target, _fn_wrap: Optional[Any] = ...) -> None: ...
    def with_wrapper(self, fn_wrap): ...
    def with_dispatch_target(self, dispatch_target): ...
    def listen(self, *args, **kw): ...
    def remove(self): ...
    def contains(self): ...
    def base_listen(self, propagate: bool = ..., insert: bool = ..., named: bool = ...): ...
    def append_to_list(self, owner, list_): ...
    def remove_from_list(self, owner, list_): ...
    def prepend_to_list(self, owner, list_): ...
